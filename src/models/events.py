"""
Event Models

All event types used in the Icarus trading system.
Events are immutable and use dataclasses for type safety.
"""
from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Any, Dict, Optional
from uuid import UUID, uuid4


# ============================================================================
# Base Event
# ============================================================================

@dataclass(frozen=True)
class Event:
    """Base class for all events"""
    event_id: UUID = field(default_factory=uuid4)
    timestamp: datetime = field(default_factory=datetime.now)

    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary for serialization"""
        result = {}
        for k, v in self.__dict__.items():
            if isinstance(v, (UUID, datetime)):
                result[k] = str(v)
            elif isinstance(v, Decimal):
                result[k] = float(v)
            else:
                result[k] = v
        return result


# ============================================================================
# Market Data Events
# ============================================================================

@dataclass(frozen=True)
class MarketTickEvent(Event):
    """Real-time price tick from exchange"""
    symbol: str = ""
    price: Decimal = Decimal('0')
    volume: Decimal = Decimal('0')
    bid: Optional[Decimal] = None
    ask: Optional[Decimal] = None
    spread: Optional[Decimal] = None


@dataclass(frozen=True)
class OHLCVEvent(Event):
    """OHLCV candle data"""
    symbol: str = ""
    interval: str = ""  # 1m, 5m, 15m, 1h, 4h, 1d
    open: Decimal = Decimal('0')
    high: Decimal = Decimal('0')
    low: Decimal = Decimal('0')
    close: Decimal = Decimal('0')
    volume: Decimal = Decimal('0')
    trades: Optional[int] = None


@dataclass(frozen=True)
class MarketDataErrorEvent(Event):
    """Market data feed error"""
    symbol: str = ""
    error_type: str = ""
    error_message: str = ""
    reconnect_attempt: int = 0


# ============================================================================
# Trading Signal Events
# ============================================================================

@dataclass(frozen=True)
class TradingSignalEvent(Event):
    """Trading signal generated by strategy"""
    strategy_name: str = ""
    symbol: str = ""
    side: str = ""  # buy or sell
    confidence: Decimal = Decimal('0')  # 0.0 to 1.0
    reason: str = ""
    metadata: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class SignalCancelledEvent(Event):
    """Signal cancelled before execution"""
    signal_id: UUID = field(default_factory=uuid4)
    strategy_name: str = ""
    symbol: str = ""
    reason: str = ""


# ============================================================================
# Trade Execution Events
# ============================================================================

@dataclass(frozen=True)
class OrderPlacedEvent(Event):
    """Order placed on exchange"""
    order_id: str = ""
    strategy_name: str = ""
    symbol: str = ""
    side: str = ""
    quantity: Decimal = Decimal('0')
    order_type: str = "market"  # market, limit, stop
    price: Optional[Decimal] = None
    trade_mode: str = "paper"  # paper or live


@dataclass(frozen=True)
class TradeExecutedEvent(Event):
    """Trade executed (filled)"""
    trade_id: Optional[UUID] = None
    order_id: Optional[str] = None
    strategy_name: str = ""
    symbol: str = ""
    side: str = ""
    quantity: Decimal = Decimal('0')
    price: Decimal = Decimal('0')
    fee: Decimal = Decimal('0')
    trade_mode: str = "paper"


@dataclass(frozen=True)
class OrderCancelledEvent(Event):
    """Order cancelled"""
    order_id: str = ""
    strategy_name: str = ""
    symbol: str = ""
    reason: str = ""


@dataclass(frozen=True)
class TradeErrorEvent(Event):
    """Trade execution error"""
    order_id: Optional[str] = None
    strategy_name: str = ""
    symbol: str = ""
    error_type: str = ""
    error_message: str = ""


# ============================================================================
# Position Events
# ============================================================================

@dataclass(frozen=True)
class PositionOpenedEvent(Event):
    """New position opened"""
    position_id: UUID = field(default_factory=uuid4)
    strategy_name: str = ""
    symbol: str = ""
    quantity: Decimal = Decimal('0')
    entry_price: Decimal = Decimal('0')


@dataclass(frozen=True)
class PositionUpdatedEvent(Event):
    """Position updated (size or value changed)"""
    position_id: UUID = field(default_factory=uuid4)
    strategy_name: str = ""
    symbol: str = ""
    quantity: Decimal = Decimal('0')
    current_price: Decimal = Decimal('0')
    unrealized_pnl: Decimal = Decimal('0')


@dataclass(frozen=True)
class PositionClosedEvent(Event):
    """Position closed"""
    position_id: UUID = field(default_factory=uuid4)
    strategy_name: str = ""
    symbol: str = ""
    quantity: Decimal = Decimal('0')
    entry_price: Decimal = Decimal('0')
    exit_price: Decimal = Decimal('0')
    pnl: Decimal = Decimal('0')
    return_pct: Decimal = Decimal('0')
    hold_duration: Optional[str] = None


# ============================================================================
# Portfolio Events
# ============================================================================

@dataclass(frozen=True)
class PortfolioSnapshotEvent(Event):
    """Portfolio snapshot taken"""
    strategy_name: str = ""
    total_value: Decimal = Decimal('0')
    cash: Decimal = Decimal('0')
    positions_value: Decimal = Decimal('0')
    unrealized_pnl: Decimal = Decimal('0')
    realized_pnl: Decimal = Decimal('0')
    total_return_pct: Decimal = Decimal('0')
    num_positions: int = 0


# ============================================================================
# Meta-Strategy Events
# ============================================================================

@dataclass(frozen=True)
class AllocationEvent(Event):
    """Capital allocation changed"""
    allocations: Dict[str, float] = field(default_factory=dict)  # strategy_name -> pct
    reason: str = ""
    metadata: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class RebalanceRequestEvent(Event):
    """Request to rebalance portfolio"""
    reason: str = ""
    target_allocations: Optional[Dict[str, float]] = None


@dataclass(frozen=True)
class RebalanceCompletedEvent(Event):
    """Portfolio rebalancing completed"""
    old_allocations: Dict[str, float] = field(default_factory=dict)
    new_allocations: Dict[str, float] = field(default_factory=dict)
    trades_executed: int = 0


# ============================================================================
# Fork Management Events
# ============================================================================

@dataclass(frozen=True)
class ForkRequestEvent(Event):
    """Request to create database fork"""
    requesting_agent: str = ""
    purpose: str = ""
    ttl_seconds: int = 3600  # 1 hour default
    metadata: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class ForkCreatedEvent(Event):
    """Database fork created"""
    fork_id: str = ""
    service_id: str = ""
    connection_params: Dict[str, Any] = field(default_factory=dict)
    requesting_agent: str = ""


@dataclass(frozen=True)
class ForkCompletedEvent(Event):
    """Fork usage completed, ready for cleanup"""
    fork_id: str = ""
    requesting_agent: str = ""
    results: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class ForkDestroyedEvent(Event):
    """Database fork destroyed"""
    fork_id: str = ""
    reason: str = ""


# ============================================================================
# Risk Management Events
# ============================================================================

@dataclass(frozen=True)
class RiskAlertEvent(Event):
    """Risk threshold warning"""
    alert_type: str = ""  # position_size, daily_loss, drawdown, exposure
    severity: str = "warning"  # warning, critical, emergency
    strategy_name: Optional[str] = None
    symbol: Optional[str] = None
    message: str = ""
    current_value: Optional[Decimal] = None
    threshold_value: Optional[Decimal] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class EmergencyHaltEvent(Event):
    """Emergency trading halt"""
    reason: str = ""
    triggered_by: str = ""  # agent or manual
    affected_strategies: Optional[list[str]] = None


@dataclass(frozen=True)
class HaltResumedEvent(Event):
    """Trading resumed after halt"""
    halt_id: UUID = field(default_factory=uuid4)
    reason: str = ""
    resumed_by: str = ""


# ============================================================================
# Agent Lifecycle Events
# ============================================================================

@dataclass(frozen=True)
class AgentStartedEvent(Event):
    """Agent started"""
    agent_name: str = ""
    config: Optional[Dict[str, Any]] = None


@dataclass(frozen=True)
class AgentStoppedEvent(Event):
    """Agent stopped"""
    agent_name: str = ""
    reason: str = ""


@dataclass(frozen=True)
class AgentErrorEvent(Event):
    """Agent error occurred"""
    agent_name: str = ""
    error_type: str = ""
    error_message: str = ""
    is_fatal: bool = False


@dataclass(frozen=True)
class AgentHeartbeatEvent(Event):
    """Agent heartbeat (health check)"""
    agent_name: str = ""
    status: str = "running"
    metrics: Optional[Dict[str, Any]] = None


# ============================================================================
# Backtest/Simulation Events
# ============================================================================

@dataclass(frozen=True)
class BacktestStartedEvent(Event):
    """Backtest simulation started"""
    backtest_id: UUID = field(default_factory=uuid4)
    fork_id: Optional[str] = None
    strategy_name: str = ""
    start_date: datetime = field(default_factory=datetime.now)
    end_date: datetime = field(default_factory=datetime.now)
    initial_capital: Decimal = Decimal('10000')


@dataclass(frozen=True)
class BacktestCompletedEvent(Event):
    """Backtest simulation completed"""
    backtest_id: UUID = field(default_factory=uuid4)
    strategy_name: str = ""
    results: Dict[str, Any] = field(default_factory=dict)


# ============================================================================
# Event Type Registry
# ============================================================================

# Mapping of event type names to classes for deserialization
EVENT_TYPES = {
    # Market Data
    'MarketTickEvent': MarketTickEvent,
    'OHLCVEvent': OHLCVEvent,
    'MarketDataErrorEvent': MarketDataErrorEvent,

    # Trading Signals
    'TradingSignalEvent': TradingSignalEvent,
    'SignalCancelledEvent': SignalCancelledEvent,

    # Trade Execution
    'OrderPlacedEvent': OrderPlacedEvent,
    'TradeExecutedEvent': TradeExecutedEvent,
    'OrderCancelledEvent': OrderCancelledEvent,
    'TradeErrorEvent': TradeErrorEvent,

    # Positions
    'PositionOpenedEvent': PositionOpenedEvent,
    'PositionUpdatedEvent': PositionUpdatedEvent,
    'PositionClosedEvent': PositionClosedEvent,

    # Portfolio
    'PortfolioSnapshotEvent': PortfolioSnapshotEvent,

    # Meta-Strategy
    'AllocationEvent': AllocationEvent,
    'RebalanceRequestEvent': RebalanceRequestEvent,
    'RebalanceCompletedEvent': RebalanceCompletedEvent,

    # Fork Management
    'ForkRequestEvent': ForkRequestEvent,
    'ForkCreatedEvent': ForkCreatedEvent,
    'ForkCompletedEvent': ForkCompletedEvent,
    'ForkDestroyedEvent': ForkDestroyedEvent,

    # Risk Management
    'RiskAlertEvent': RiskAlertEvent,
    'EmergencyHaltEvent': EmergencyHaltEvent,
    'HaltResumedEvent': HaltResumedEvent,

    # Agent Lifecycle
    'AgentStartedEvent': AgentStartedEvent,
    'AgentStoppedEvent': AgentStoppedEvent,
    'AgentErrorEvent': AgentErrorEvent,
    'AgentHeartbeatEvent': AgentHeartbeatEvent,

    # Backtest
    'BacktestStartedEvent': BacktestStartedEvent,
    'BacktestCompletedEvent': BacktestCompletedEvent,
}


def get_event_type(event: Event) -> str:
    """Get the event type name from an event instance"""
    return event.__class__.__name__
