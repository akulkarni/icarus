"""
Event Models

Defines all event types used in the system.
Events are published on the event bus for inter-agent communication.
"""
from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any


@dataclass
class BaseEvent:
    """Base class for all events"""
    timestamp: datetime = field(default_factory=datetime.now)
    event_id: Optional[str] = None


@dataclass
class MarketTickEvent(BaseEvent):
    """Real-time price update from market data stream"""
    symbol: str
    price: Decimal
    volume: Decimal


@dataclass
class OHLCVEvent(BaseEvent):
    """OHLCV candle data"""
    symbol: str
    open: Decimal
    high: Decimal
    low: Decimal
    close: Decimal
    volume: Decimal
    interval: str  # e.g., '1m', '5m', '1h'


@dataclass
class TradingSignalEvent(BaseEvent):
    """Trading signal generated by a strategy"""
    strategy_name: str
    symbol: str
    side: str  # 'buy' or 'sell'
    confidence: float  # 0.0 to 1.0
    reason: str
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class TradeExecutedEvent(BaseEvent):
    """Trade execution confirmation"""
    strategy_name: str
    symbol: str
    side: str  # 'buy' or 'sell'
    quantity: Decimal
    price: Decimal
    fee: Decimal
    order_id: Optional[str] = None


@dataclass
class AllocationEvent(BaseEvent):
    """Capital allocation update from meta-strategy"""
    allocations: Dict[str, float]  # strategy_name -> allocation_pct
    reason: str


@dataclass
class ForkRequestEvent(BaseEvent):
    """Request to create a database fork"""
    requesting_agent: str
    purpose: str
    ttl_seconds: int = 3600  # Default 1 hour


@dataclass
class ForkCreatedEvent(BaseEvent):
    """Database fork creation confirmation"""
    fork_id: str
    service_id: str
    connection_params: Dict[str, Any]
    requesting_agent: str


@dataclass
class ForkCompletedEvent(BaseEvent):
    """Signal that fork work is complete and can be destroyed"""
    fork_id: str
    requesting_agent: str
    results: Optional[Dict[str, Any]] = None


@dataclass
class RiskAlertEvent(BaseEvent):
    """Risk limit warning or breach"""
    severity: str  # 'warning', 'critical'
    alert_type: str  # e.g., 'position_size', 'daily_loss', 'exposure'
    message: str
    current_value: float
    threshold_value: float


@dataclass
class EmergencyHaltEvent(BaseEvent):
    """Emergency trading halt"""
    reason: str
    triggered_by: str  # Agent that triggered halt
